// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int powersOfTwo,sum,powerCnt;
        var boolean sign;
        var bool sign;
        let sign=true;
        let powerCnt=0;
        if(x<0){
            let x=-x;
            if(y>-1){
                let sign=false;
            }
            else{
                let y=-y;
            }
        }
        else{
            if(y<0){
                let y=-y;
                let sign=false;
            }
        }
        let powersOfTwo=1;
        let sum=0;
        while(powersOfTwo<(y+1)){
            if((powersOfTwo&y)=powersOfTwo){
                let sum=sum+x;
            }
            let x=x+x;
            let powersOfTwo=powersOfTwo+powersOfTwo;
            let powerCnt=powerCnt+1;
            if(powerCnt=15){
                //overflow of the int
                let powersOfTwo=y+1;
            }
        }
        if(~sign){
            let sum=-sum;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q;
        var bool sign;
        let sign=true;
        if(x=0){
            return 0;
        }
        if(x<0){
            let x=-x;
            if(y>0){
                let sign=false;
            }
            else{
                let y=-y;
            }
        }
        else{
            if(y<0){
                let y=-y;
                let sign=false;
            }
        }
        if(y>x | y<0){
            return 0;
        }
        let q = Math.divide(x,y+y);
        if((x-(2*q*y))<y){
            if(~sign){

                let q=-q;
            }
            return q+q;
        }
        else{
            if(~sign){
                let q=q+q+1;
                let q=-q;
                
                
            }
            else{
                let q=q+q+1;
            }
            return q;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,n,ans;
        let ans=0;
        let y=0;
        let n=182;
        while(y<n){
            if(Math.multiply(y,y)<(x) | (y*y=x)){
                let ans=y;
            }
            let y=y+1;
        }
        return ans;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x>-1){
            return x;
        }
        return -x;
    }
}
