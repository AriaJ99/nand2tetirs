// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram,heap;
    static int freeList;
    /** Initializes the class. */
    function void init() {
        let ram=0;
        let heap=2048;
        let freeList=0;
        let heap[0]=0;
        let heap[1]=14335;
        return;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int move,prev;
        let move=freeList;
        let prev=-1;
        while(heap[move+1]<(size+2)){
            let prev=move;
            let move=heap[move];
        }
        let heap[move+2+size+1]=heap[move+1]-size;
        let heap[move+1]=size;
        if(heap[move]=0){
            let heap[move+2+size]=0;//end of linked list
        }
    
        //let heap[move]=move+2+size;
        let freeList=move+2+size;
        return move+2+heap;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int move,prev;
        let move=freeList;
        let prev=-1;
        while((heap[move]>0) & (~(heap+move=(o-2)))){
            let prev=move;
            let move=heap[move];
        } 
        if(heap[move]=0){
            //let heap[move]=o-heap-2;
            //let heap[o-heap-2]=0;
            let prev=heap[freeList+1];
            let freeList=o-heap-2;
            let heap[freeList+1]=heap[freeList+1]+prev;
        }
        else{
            let heap[prev+1]=heap[prev+1]+heap[move+1];
            let heap[prev]=heap[move];
        }
        return;
    }    
}
