// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram,heap;
    static int freeList;
    /** Initializes the class. */
    function void init() {
        let ram=0;
        let heap=2048;
        let freeList=0;
        let heap[0]=0;
        let heap[1]=14335;
        return;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int move,prev;
        let move=freeList;
        let prev=-1;
        while(heap[move+1]<(size)){
            let prev=move;
            let move=heap[move];
        }

        let heap[move+2+size+1]=heap[move+1]-size-2;
        let heap[move+1]=size;

        let heap[move+2+size]=heap[move];
        let heap[move]=move+2+size;
        //let heap[move]=move+2+size;
        if(prev=-1){
            let freeList=move+2+size;
        }
        return move+2+heap;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int move,prev;

 
               
        let move=freeList;
        let prev=-1;
        if(freeList>(o-2-heap)){
            //if memory is before freeList
            if(freeList=(o+o[-1]-heap)){
                //if memory is connected with freeList
                let o[-1]=o[-1]+2+heap[freeList+1];
            }
            let o[-2]=freeList;
            let freeList=o-heap-2;
            return;
        }
        ////////////////////////////////////////////////////////////////////////////////////
        while((move<(o-2-heap))){
            let prev=move;
            let move=heap[move];
        } 
        
        if(heap+prev+2+heap[prev+1]=(o-2)){
            if(o+o[-1]=(heap+move)){
                let heap[prev+1]=heap[prev+1]+o[-1]+heap[move+1]+4;
                let heap[prev]=heap[move];
            }
            else{
                let heap[prev+1]=o[-1]+2+heap[prev+1];
                let heap[prev]=move;
            }
            
            
        }
        else{
            let heap[prev]=(o-2-heap);
            if(o+o[-1]=(heap+move)){
                let o[-1]=o[-1]+2+heap[move+1];
                let o[-2]=heap[move];
               
            }
            else{
                let o[-2]=move;
                
            }
            let heap[prev]=o-2-heap;
        }

        return;
    }    
}
